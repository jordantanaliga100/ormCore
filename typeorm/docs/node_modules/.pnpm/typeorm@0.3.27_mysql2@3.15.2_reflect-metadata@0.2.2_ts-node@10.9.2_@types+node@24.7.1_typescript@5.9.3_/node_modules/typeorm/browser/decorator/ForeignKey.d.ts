import { ObjectType } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/common/ObjectType.js";
import { ForeignKeyOptions } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/decorator/options/ForeignKeyOptions.js";
/**
 * Creates a database foreign key. Can be used on entity property or on entity.
 * Can create foreign key with composite columns when used on entity.
 * Warning! Don't use this with relations; relation decorators create foreign keys automatically.
 */
export declare function ForeignKey<T>(typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>), options?: ForeignKeyOptions): PropertyDecorator;
/**
 * Creates a database foreign key. Can be used on entity property or on entity.
 * Can create foreign key with composite columns when used on entity.
 * Warning! Don't use this with relations; relation decorators create foreign keys automatically.
 */
export declare function ForeignKey<T>(typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>), inverseSide: string | ((object: T) => any), options?: ForeignKeyOptions): PropertyDecorator;
/**
 * Creates a database foreign key. Can be used on entity property or on entity.
 * Can create foreign key with composite columns when used on entity.
 * Warning! Don't use this with relations; relation decorators create foreign keys automatically.
 */
export declare function ForeignKey<T, C extends (readonly [] | readonly string[]) & (number extends C["length"] ? readonly [] : unknown)>(typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>), columnNames: C, referencedColumnNames: {
    [K in keyof C]: string;
}, options?: ForeignKeyOptions): ClassDecorator;

import { QueryResultCacheOptions } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/cache/QueryResultCacheOptions.js";
import { QueryRunner } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/query-runner/QueryRunner.js";
/**
 * Implementations of this interface provide different strategies to cache query builder results.
 */
export interface QueryResultCache {
    /**
     * Creates a connection with given cache provider.
     */
    connect(): Promise<void>;
    /**
     * Closes a connection with given cache provider.
     */
    disconnect(): Promise<void>;
    /**
     * Perform operations during schema synchronization.
     */
    synchronize(queryRunner?: QueryRunner): Promise<void>;
    /**
     * Get data from cache.
     * Returns cache result if found.
     * Returns undefined if result is not cached.
     */
    getFromCache(options: QueryResultCacheOptions, queryRunner?: QueryRunner): Promise<QueryResultCacheOptions | undefined>;
    /**
     * Stores given query result in the cache.
     */
    storeInCache(options: QueryResultCacheOptions, savedCache: QueryResultCacheOptions | undefined, queryRunner?: QueryRunner): Promise<void>;
    /**
     * Checks if cache is expired or not.
     */
    isExpired(savedCache: QueryResultCacheOptions): boolean;
    /**
     * Clears everything stored in the cache.
     */
    clear(queryRunner?: QueryRunner): Promise<void>;
    /**
     * Removes all cached results by given identifiers from cache.
     */
    remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void>;
}

import { DataSource } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/data-source/DataSource.js";
import { EntityManager } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/entity-manager/EntityManager.js";
import { QueryRunner } from ".pnpm/typeorm@0.3.27_pg@8.16.3_reflect-metadata@0.2.2_ts-node@10.9.2_@types+node@24.7.2_typescript@5.9.3_/node_modules/typeorm/query-runner/QueryRunner.js";
/**
 * A special EntityManager that includes import/export and load/save function
 * that are unique to Sql.js.
 */
export declare class SqljsEntityManager extends EntityManager {
    readonly "@instanceof": symbol;
    private driver;
    constructor(connection: DataSource, queryRunner?: QueryRunner);
    /**
     * Loads either the definition from a file (Node.js) or localstorage (browser)
     * or uses the given definition to open a new database.
     */
    loadDatabase(fileNameOrLocalStorageOrData: string | Uint8Array): Promise<void>;
    /**
     * Saves the current database to a file (Node.js) or localstorage (browser)
     * if fileNameOrLocalStorage is not set options.location is used.
     */
    saveDatabase(fileNameOrLocalStorage?: string): Promise<void>;
    /**
     * Returns the current database definition.
     */
    exportDatabase(): Uint8Array;
}
